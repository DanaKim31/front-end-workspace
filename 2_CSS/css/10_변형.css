.box-container {
  height: 50vh;
  border: 1px solid black;
}
#box-container1 {
  display: flex;
  justify-content: center;
  align-items: center;
}
.box {
  width: 200px;
  height: 200px;
  border: 1px solid black;
  background-color: rgb(172, 221, 205, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2rem;

  /* transition: 변환속성 | 애니메이션시간 */
  transition: 5s cubic-bezier(0.6, -1.21, 0.29, 2.19);
}
.box:hover {
  background-color: rgba(247, 247, 212, 0.8);
  /* transform: 변형함수(); */
  /* scale : 지정한 크기만큼 확대/축소하는 함수(축소: 0.5 등 1보다 아래) */
  transform: scale(2); /* 마이너스 없음 */
  /* rotate : 지정한 각도(deg)만큼 회전시키는 함수 */
  transform: rotate(30deg);
  /* skew : 지정한 각도만큼 비틀어 왜곡하는 함수 */
  transform: skew(30deg);
  transform: skewY(-30deg);
  /* translate : x축, y축, z축 방향으로 이동시키는 함수 */
  transform: translateX(100px);
  transform: translate(100px, 200px);
  transform: scale(1.5) rotate(15deg); /* 스페이스 사용해서 복수사용 가능 */

  /* transform-origin : 변형의 기준점을 변경하는 속성 */
  transform-origin: left top;
  transform-origin: right bottom;
}

/* animation */
#box-container2 {
  width: 1200px;
  height: 600px;
}
.animation-box {
  box-sizing: border-box;
  width: 200px;
  height: 200px;
  border: 2px solid black;
  background: indigo;
  color: white;
  font-weight: bold;
  display: flex;
  justify-content: center;
  /* animation: name(keyframes로 만들어둔 애니메이션명) duration(애니메이션 작동 시간) linear(변환속성 '균일하게') iteration-count(반복횟수)
    - 만들어둔 애니메이션 이름으로 'animation 적용 시 keyframes에서 설정해둔 해당 애니메이션 적용 
  */
  /* animation: name duration iteration-count timing-function delay direction;
    - name : 설정한 keyframe 지정
    - duration : 실행시간 지정
    - ieration-count : 반복 횟수 지정 (숫자 or infinite)
    - timing-function : 속도 형태 지정
    - delay : 대기 시간 지정
    - direction : 진행 형태 지정
  */
  animation: boxAni 5s linear;
  animation: boxAni 5s linear 3;
  animation: boxAni 5s linear infinite;
  /* alternate: direction 중의 하나, 애니메이션 실행 > 역순 실행 */
  /* reverse: direction 중의 하나, 애니메이션 실행 */
  animation: boxAni 5s linear infinite alternate;
  animation: boxAni 5s linear infinite reverse;
  animation: boxAni 5s linear infinite alternate-reverse;
  /* forwards: 애니메이션 실행 후 처음 상태에서 멈춤 > forwards 적용 시 애니메이션 실행 마지막 상태 유지 */
  animation: boxAni 5s linear forwards;
}
.animation-box:hover {
  /* animation-play-state: paused; : 애니메이션이 실행 중일 때 마우스 호버 시 애니메이션 중지 */
  animation-play-state: paused;
  background-color: yellow;
}

/* @keyframes + 애니메이션이름 {
     from { 시작 프레임 설정 }
     to { 끝 프레임 설정 }
     % { 단위로 지정 가능 }
   }
   */
@keyframes boxAni {
  /* from {
    transform: translate(0, 0);
  }
  to {
    transform: translate(200px, 0);
  } */
  0% {
    transform: translate(0, 0);
  }
  50% {
    transform: translate(1000px, 0);
  }
  100% {
    transform: translate(1000px, 400px);
  }
}

/* 3D */
#box-container3 {
  display: flex;
  justify-content: center;
  align-items: center;
}
#box-container3 .card:hover {
  transform: rotateY(180deg);
}
.card {
  width: 200px;
  height: 200px;
  transform: rotateY(45deg);
  /* perspective(px) :  */
  transform: perspective(400px) rotateY(45deg);
  transform: rotateY(0deg);
  transition: 3s;
  position: relative;
  transform-style: preserve-3d;
}
.card-item {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
.card-item-front {
  /* background-image 사용 시 아래와 같이 묶어서 많이 쓰임
    background-image: url(../../resources/blueberries.jpg);
    background-size: cover;
    background-position: center;
  */
  background-image: url(../../resources/blueberries.jpg);
  background-size: cover;
  background-position: center;
  z-index: 1;
  /* backface-visibillity
    - 요소가 회전하여 뒷면이 보일 경우 표시 여부를 지정하는 속성 
  */
  backface-visibility: hidden; /* 기본값 : visible */
}
.card-item-back {
  background-color: cadetblue;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  font-size: 2rem;
  color: white;
  /* BACK 이라는 텍스트를 180도 회전된 상태에서 시작: 호버 시 정상 노출 */
  transform: rotateY(180deg);
}
